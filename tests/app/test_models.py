#!/usr/bin/env python
# coding: utf-8

# -----------------------------------------------------------------------------
# --- Typing ---
# -----------------------------------------------------------------------------
from typing import Dict

# -----------------------------------------------------------------------------
# --- Pytest ---
# -----------------------------------------------------------------------------
import pytest

# -----------------------------------------------------------------------------
# --- Flask ---
# -----------------------------------------------------------------------------
from flask import Flask

# -----------------------------------------------------------------------------
# --- Models ---
# -----------------------------------------------------------------------------
from app import models

# -----------------------------------------------------------------------------
# --- Tests ---
# -----------------------------------------------------------------------------
from tests.files.test_credentials import TEST_USERS


# -----------------------------------------------------------------------------
#  ______   ______     ______     ______   ______
# /\__  _\ /\  ___\   /\  ___\   /\__  _\ /\  ___\
# \/_/\ \/ \ \  __\   \ \___  \  \/_/\ \/ \ \___  \
#    \ \_\  \ \_____\  \/\_____\    \ \_\  \/\_____\
#     \/_/   \/_____/   \/_____/     \/_/   \/_____/
#
# -----------------------------------------------------------------------------
def test_user_password_hash(flask_app: Flask) -> None:
    # -------------------------------------------------------------------------
    # --- Arrange ---
    # -------------------------------------------------------------------------
    test_user = models.db.session.query(
        models.User
    ).filter_by(
        email=TEST_USERS['admin']['email']
    ).first()

    correct_password = TEST_USERS['admin']['password']
    wrong_password = "wrong_password"

    # -------------------------------------------------------------------------
    # --- Act ---
    # -------------------------------------------------------------------------
    is_valid = test_user.verify_password(correct_password)
    is_invalid = test_user.verify_password(wrong_password)

    # -------------------------------------------------------------------------
    # --- Asserts ---
    # -------------------------------------------------------------------------
    assert is_valid is True
    assert is_invalid is False


def test_user_password_property_error(flask_app: Flask) -> None:
    # -------------------------------------------------------------------------
    # --- Arrange ---
    # -------------------------------------------------------------------------
    expected_error = 'password is not readable attribute'
    test_user = models.db.session.query(
        models.User
    ).filter_by(
        email=TEST_USERS['admin']['email']
    ).first()

    # -------------------------------------------------------------------------
    # --- Act & Asserts ---
    # -------------------------------------------------------------------------
    with pytest.raises(AttributeError, match=expected_error):
        _ = test_user.password


def test_user_str_and_repr(flask_app: Flask) -> None:
    # -------------------------------------------------------------------------
    # --- Arrange ---
    # -------------------------------------------------------------------------
    user = models.db.session.query(
        models.User
    ).filter_by(
        email=TEST_USERS['admin']['email']
    ).first()
    expected = f"<User {user.id}: {user.email}>"

    # -------------------------------------------------------------------------
    # --- Act ---
    # -------------------------------------------------------------------------
    user_str = str(user)
    user_repr = repr(user)

    # -------------------------------------------------------------------------
    # --- Asserts ---
    # -------------------------------------------------------------------------
    assert user_str == expected
    assert user_repr == expected


def test_task_str_and_repr(flask_app: Flask, sample_task_data: Dict) -> None:
    # -----------------------------------------------------------------------
    # --- Arrange ---
    # -----------------------------------------------------------------------
    user_id = 1
    task = models.Task(
        title=sample_task_data["title"],
        description=sample_task_data["description"],
        status=sample_task_data["status"],
        due_date=sample_task_data["due_date"],
        user_id=user_id,
    )
    models.db.session.add(task)
    models.db.session.commit()

    expected = f"<Task {task.id}: {task.title}>"

    # -------------------------------------------------------------------------
    # --- Act ---
    # -------------------------------------------------------------------------
    task_str = str(task)
    task_repr = repr(task)

    # -------------------------------------------------------------------------
    # --- Asserts ---
    # -------------------------------------------------------------------------
    assert task_str == expected
    assert task_repr == expected

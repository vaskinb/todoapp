name: Coverage

permissions:
  contents: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      FLASK_ENV: test
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: todoapp_test
          POSTGRES_PASSWORD: todoapp_test
          POSTGRES_DB: todoapp_test
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install pytest pytest-cov anybadge

      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          pytest --cov=app --cov-report=term --cov-report=xml

      - name: Debug coverage.xml
        run: cat coverage.xml

      - name: Debug coverage value
        run: |
          source venv/bin/activate
          COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' coverage.xml | head -n1 | awk '{printf "%d", $1 * 100}')
          echo "Extracted coverage: $COVERAGE"

      - name: Generate coverage badge
        run: |
          source venv/bin/activate
          COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' coverage.xml | head -n1 | awk '{printf "%d", $1 * 100}')
          echo "Coverage is: $COVERAGE%"
          anybadge --overwrite --label="coverage" --value="${COVERAGE}%" --file=coverage.svg

      - name: Commit and push coverage badge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add coverage.svg
          git commit -m "Update coverage badge" || echo "No changes to commit"
          git push

      - name: Delete existing coverage badge release (if exists)
        continue-on-error: true
        run: |
          gh release delete coverage -y || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new coverage badge release
        uses: ncipollo/release-action@v1
        with:
          tag: coverage
          name: Coverage Badge Release
          body: 'Release for storing generated coverage badge'
          draft: false
          prerelease: false
          allowUpdates: true
          replacesArtifacts: true
          artifacts: "coverage.svg"
          token: ${{ secrets.GITHUB_TOKEN }}
